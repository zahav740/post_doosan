;
; FANUC
; -----
;
@init_post
    global string tool_diameter_f comp org_file_name file_n file_open tmp_file
    global numeric use_m0 last_xhome z_thread_start start_ang
    global numeric ch_tool ch_ang
    global integer h_old s_old use_feed z_old arc_dir save_part_home_number  save_part_home_number_5x  max_tool tlist<<1,50>> find job_index
    global logical last_is_arc  Flag_end_of_job loop_flag clamp_flag rotary_use_x first_tmatrix FIRTS_RAP_MOVE tlchng
    global numeric xhome_temp yhome_temp zhome_temp print_spin
  global logical pos_decleared<<100>>
 ;****************************************************************************
    global numeric z_thred_start
 ;****************************************************************************
    GLOBAL LOGICAL main
    ; Non GPPL variables
    num_user_procs =    1
    line_labels    = FALSE     ; Jump to N...

    ; GPPL variables
    pre_processor   = 'FANUC'
    numeric_def_f   = '5.3'
    integer_def_f   = '5.0(p)'
    gcode_f         = '2.0(p)'
    mcode_f         = '2.0(p)'
    xpos_f          = '5.3'
    ypos_f          = '5.3'
    zpos_f          = '5.3'
    feed_f          = '4.3(p)'
    tool_diameter_f = '5.3/1'
    blknum_f        = '5.0(p)'
    blknum_gen      = FALSE
    blknum_exist    = TRUE
    blknum          = 100
    blknum_delta    = 100
    blknum_max      = 32000
    clamp_flag      = FALSE
    rotary_use_x    = FALSE
    first_tmatrix   = TRUE
    print_spin      =  0
      global integer trc
      ;input 'TRACE MODE' trc
    trace "ALL":trc
    loop_flag=0   
endp
;-------------------
@start_of_file
    ; before tools definition
    file_n = 'header'
    path_part = 'C:\\GCOD' 
    call @open_file
    {nl,'%'}
    {nl, 'O'program_number, ' (', g_file_name, ')'}
    {nl, '( DOOSAN )'}
    {nl, '(PROGRAM - ALEXEY)'}
    {nb,'( 'date,'  'time,' )'}    
    if rotate_used then
        gcode = 69
        {nb, 'G'gcode}
    endif
    if mirror_used then
        {nb, 'G50.1 X0 Y0'}
    endif
    {nb, '(SUBROUTINES: O'first_proc_number, ' .. O'last_proc_number, ')'}
   {nb,' G0 G17 G40 G80 G90 '}
   if home_number le 6
    {'G'(53 + home_number)}
  else
    {nb,'G54.1 P'(home_number-6)}
  endif
endp
;-------------------
@open_file
             local string str
    if file_open ne file_n
                            str = path_part + '/' + file_open
        {nl,'!! close file = ',str ,'!!' }
                            str = path_part + '/' + file_n
        {nl,'!! open file = ',str ,'!!' }
        file_open  = file_n
    endif
endp
;-------------------
@start_program
main = TRUE
endp
;-------------------
@end_program
     {nb,'M9'}
     {nb, 'G91 G28 Z0.M5'}
     {nb, 'G91 G28 Y0.'}
             ;if x_4_home eq true
                    {nb, 'G90'}
    if home_number le 6 
        {nb,'G'(53 + home_number)}
  else
    {nb,'G54.1 P'(home_number-6)}
  endif 
                  ;  {nb,'M36'}  
                   ; {nb,'G0 A0'}
                   ; {nb,'M35'} 
             ;endif
     {nb, 'M30'}
     {nb,'O97'}
     {nb,'( BEFORE TOOL CHANGE )'}
     {nb, 'M9'}
     {nb, 'G91 G28 Z0 M5'}
     {nb, 'G91 G28 Y0'}
                   if move_home_y ne 0
                      {nb,'G90 G53 G0 Y',move_home_y}
                   endif 
                   if move_home_x ne 0
                      {nb,'G90 G53 G0 X',move_home_x}
                   endif 
     ;{nb, 'M01'} 
     {nb,'M99'}
     {nb,' '}
   main = FALSE
endp
;-------------------
@end_of_file
    label = first_user_proc
   if x4_use eq true
        CALL @home_data1
   endif
    file_n = g_file_name
              local string str
    call @open_file
              str = path_part + '/header'
              {nl,'!! copy file = 'str'!!'}
              str = path_part + '/tools'
              {nl,'!! copy file = 'str'!!'}
              str = path_part + '/body'
              {nl,'!! copy file = 'str'!!'}
    {nl,'%'}
              str = path_part + '/' + file_n
              {nl,'!! close file = 'str ,'!!'}
              str = path_part + '/header'
    {nl,'!! delete file = 'str'!!'}
              str = path_part + '/tools'
    {nl,'!! delete file = 'str'!!'}
              str = path_part + '/body'
    {nl,'!! delete file = 'str'!!'}
     {nl, '%'}
endp
;-------------------
@relative_mode
    gcode = 91
    {nb, 'G'gcode, ' '}
    skipline = FALSE
endp
;-------------------
@absolute_mode
         gcode = 90
         {nb, 'G'gcode, ' '}
         skipline = FALSE
endp
;-------------------
@machine_plane
    if machine_plane eq XY
    endif
    if machine_plane eq YZ
    endif
    if machine_plane eq ZX
    endif
endp
;-------------------
@call_proc
;-------------------------------------------------------------------------------
    if x4_use eq true
       if main eq true
            if save_part_home_number <> part_home_number or save_part_home_number_5x eq 1 
                {nb, 'G65P'(6090+part_home_number)'    (POSITION='POSITION')'}  
            ;;;   ------
               {nb,'G90 G0'}
                {[' X'xlnext],[' Y'ylnext]}
    skipline = FALSE
    tool_direction = CW
    call @start_tool
    gcode = 43
    {nb, 'G0 G'gcode, [' Z'tool_start_plane]' H'tool_number, ' D'tool_number}
                    save_part_home_number = part_home_number 
                  gcode = 0
                                  local numeric AAA
                                AAA= mod(first_axis_angle,360)
                                    if fourth_axis_last ne 1 
                                        {nb, 'G'gcode, ' A'(AAA)}
                                    endif
             endif 
        endif
     endif 
   if  use_m0 eq 1
          if x4_use eq true
               {nb, 'G65P'(6090+part_home_number)'    (POSITION='POSITION')'}
          endif
           {nb,'G90 G0'}
           {[' X'xlnext],[' Y'ylnext]}
           skipline = FALSE
           tool_direction = CW
           call @start_tool
           gcode = 43
            {nb, 'G0 G'gcode, [' Z'tool_start_plane]' H'tool_number, ' D'tool_number}
             save_part_home_number = part_home_number 
             {nb,'M8'}
             use_m0 = 0
    endif
;------------------------------------------------------------------------------------  
if x5_job eq 1 or rot_axis_type eq axis4_radial
      save_part_home_number_5x = 1
else
    if x5_job eq false or rot_axis_type eq axis4_none
      save_part_home_number_5x = 0 
    endif
endif  
    if active(parm1) then
      {nb, '//G65 P'}
        gcode = 65
        {nb, 'G'gcode, ' P'label}
    else
 if left(job_type,3) eq 'hsm' or left(job_type,3) eq 'hss' or job_type eq 'spiral_msc' or job_type eq '3-d model' or job_type eq 'spiral_pocket'
        {nb, 'M198 P'label}   
 else 
        {nb, 'M98 P'label}
 endif
    endif
    if proc_count gt 1 then
        {' L'proc_count}
    endif
    {[' ('message, ')']}
    h_old = tool_number
    s_old = spin
    z_old = znext
    tlchng = FALSE    
endp
;-------------------
@proc
 if left(job_type,3) eq 'hsm' or left(job_type,3) eq 'hss' or job_type eq 'spiral_msc' or job_type eq '3-d model' or job_type eq 'spiral_pocket'
      local string str
    file_n = 'body'
      str = path_part + '/' + file_n
    {nl, '!! close file = 'str '!!' }
    local string fl_name sl
    local integer nm 
    nm = label+0
    fl_name = 'O'
    sl = tostr(nm:'z4.0(p)')
    fl_name = fl_name + sl
    {nl}
    { '!! open file = 'fl_name '!!' }
    {nb,'%'}
    {nl, 'O'(label),' (' job_name,')'}    
 else
    {nl, 'O'label}
 endif
endp
;-------------------
@end_proc
      local string str
    if X5_job
       ;{nb,'M35'}
    endif 
    {nb, 'M99'}
    {nl}
  if left(job_type,3) eq 'hsm' or left(job_type,3) eq 'hss' or job_type eq 'spiral_msc' or job_type eq '3-d model' or job_type eq 'spiral_pocket'
    local string fl_name sl
    local integer nm 
    nm = label
    fl_name = 'O'
    sl = tostr(nm:'z4.0(p)')
    fl_name = fl_name + sl
    {nl}
    {nl}
    { '!! close file = 'fl_name '!!' }
    file_n = 'body'
      str = path_part + '/' + file_n
        {nl,'!! open file = ',str ,'!!' }
   endif 
    {nl}
    {nl}
    {nb, ' '}
endp
;----------------
@loop
    local integer var_num
     if loop_level eq 1
         {nb, '#600=0'}
         {nb, '#601=0'}
     endif
    skipline = true
    var_num = loop_level + 20
    {nb, '#', var_num, ' = 0'}
    {nb, 'WHILE [#', var_num, ' LT ', loop_count, '] DO ', loop_level}
   loop_flag=1
endp
;----------------
@end_loop
    local integer var_num
    var_num = loop_level + 20
    {nb '#', var_num, ' = #', var_num, ' + 1'}
    {nb 'END ', loop_level}
endp
;----------------
@def_tool
endp
;-------------------
@rapid_move
IF FIRTS_RAP_MOVE EQ 1
    {nb}
    gcode = 0   
    {nb,'G'gcode, [' X'xlpos], [' Y'ylpos]}
    {nb,'G0' ,[' Z'zlpos]}   
FIRTS_RAP_MOVE = 0
ELSE
    {nb}
    gcode = 0
    if change(gcode) then
        {'G'gcode}
    else
        {'  '}
    endif
    {[' X'xlpos], [' Y'ylpos], [' Z'zlpos]}
ENDIF
endp
;-------------------
@line
    {nb}
    gcode = 1
    if change(gcode) then
        {'G'gcode}
    else
        {'  '}
    endif
    {[' X'xlpos], [' Y'ylpos], [' Z'zlpos]}
      if use_feed eq 1
        {' F'feed}
        use_feed = 0
      else
        {[' F'feed]}
      endif
endp
;-------------------
@arc
    {nb}
    ;-- arc plane --

    if arc_direction eq CCW then
        gcode = 3
    else         ; CW
        gcode = 2
    endif
    if change(gcode) then
        {'G'gcode}
    else
        {'  '}
    endif
    {[' X'xlpos] [' Y'ylpos] [' Z'zlpos]}

    if arc_size eq 360 then
        if arc_plane eq XY then
            {' I'xlcenter_rel, ' J'ylcenter_rel}
        endif
        if arc_plane eq YZ then
            {' J'xlcenter_rel, ' K'ylcenter_rel}
        endif
        if arc_plane eq ZX then
            {' K'xlcenter_rel, ' I'ylcenter_rel}
        endif
    else
        if arc_size >= 180 then
            radius = -radius
        endif
        {' R'radius}
    endif

      if use_feed eq 1
        {' F'feed}
        use_feed = 0
      else
        {[' F'feed]}
      endif
endp
;-------------------
@compensation
    if side eq COMP_LEFT then
        gcode = 41
    endif
    if side eq COMP_RIGHT then
        gcode = 42
    endif
    if side eq COMP_OFF then
        gcode = 40
    endif
    {nb, 'G'gcode, ' '}
    skipline = FALSE
endp
;-------------------
@delay
    gcode = 4
    {nb 'G'gcode, ' P'delay_period:integer_def_f}
endp
;-------------------
@change_ref_point
 if loop_flag eq 1
     if ref_point_init ne true 
           if prev_command eq '@call_proc'
               if loop_level eq 1 
                   if xhome ne 0
                             {nb '#600=[#21+1]*['xhome']'}
                   else
                             {nb '#601=[#21+1]*['yhome']'}
                   endif
               else
                   {nb '#600=[#22+1]*['xhome']'}
               endif
           else
                {nb '#600=[#21+1]*['(xhome+last_xhome)']'}
                {nb '#601=[#21+1]*['yhome']'}
           endif
         {nb, 'G52 X#600 Y#601 Z0'}
         {nb,'G90'}
     else
         {nb, 'G52 X0 Y0 Z0'}
     endif
else
        {nb, 'G52 X'xhome,' Y'yhome,' Z'zhome}
endif
    last_xhome= xhome*loop_count
endp
;-------------------
@home_number
    skipline = TRUE
    gcode = 53 + home_number
    if next_command ne '@rotary_info'
    endif 
endp
;-------------------
@rotate
    if rotate_cancel then
        gcode = 69
        {nb, 'G'gcode}
    else
        gcode = 68
        {nb, 'G'gcode, ' X0 Y0 G91 R'angle}
        {nb, 'G90'}
    endif
endp
;-------------------
@fourth_axis                 
      gcode = 0                
    {nb, 'G'gcode, ' A'first_axis_angle} 
endp
;-------------------
@change_tool
         job_index = job_index + 10
    file_n = 'tools'
    call @open_file
    {nl, '(N',job_index}
    {' T'tool_number,' DIAM.'(tool_offset*2):integer_def_f,' ',tool_message')'}
    file_n = 'body'
    call @open_file
    local logical save_blknum_gen
   skipline =true
      {nb,'M98 P97'} 
      {nb, 'M01'}  
      {nb, 'N'job_index,' M06 T'tool_number}
      {'  ( 'tool_user_type, '  D'(2*tool_offset)')'}
     {nb, 'G91 G28 Z0 M5'}
     {nb,'G90'}
    if home_number le 6 
    gcode = 53 + home_number
    {nb,'G'gcode}
  else
    {nb,'G54.1 P'(home_number-6)}
  endif
     {nb,' T'next_tool_number}
     if x4_use eq true
         {nb, 'G65P'(6090+part_home_number)'    (POSTION='POSITION')'}
         save_part_home_number = part_home_number
     endif
;------------------------------------------------------------------------------------
    {nb,'G90 G0'}
    {[' X'xlnext],[' Y'ylnext]}
    skipline = FALSE
    tool_direction = CW
    call @start_tool
    gcode = 43
    {nb, 'G0 G'gcode, [' Z'tool_start_plane] ' H'tool_number, ' D'tool_number}
    skipline = FALSE
    blknum_gen = false
    skipline = TRUE
    {nb,'M8'}
    use_m0 = 0
    ch_tool = 1
    tlchng = TRUE    
endp
;-------------------
@message
if left(message,4)ne '----'
    {nb, '(', message, ')'}
endif
endp
;-------------------
@drill
    if drill_type eq Thrd_Mill
        call @helicoil
    else
        call @simple_drill
    endif
endp
;-------------------
@simple_drill
    call @rapid_move
    if drill_type eq tapping then   
        gcode = 95
      {nb, 'G'gcode, ' '}
    endif
    gcode = 98
    {nb, 'G'gcode, ' '}
    if drill_type eq drilling then
        gcode = 81
    endif
    if drill_type eq f_drill then
        gcode = 82
    endif
    if drill_type eq peck then
        gcode = 83
    endif
    if drill_type eq tapping then
        gcode = 84
     {nb,'M29 S'spin:integer_def_f}
    endif
    if drill_type eq boring then
        gcode = 85
    endif
    if drill_type eq r_boring then
        gcode = 86
    endif
    if drill_type eq f_boring then
        gcode = 89
    endif
    {NB,'G'gcode, ' Z'drill_lower_zl, ' R'drill_upper_zl}
        if drill_type eq peck 
              {' Q'down_step}
        endif
    if drill_type eq f_drill
        {' P'delay:integer_def_f}
    endif
      if drill_type eq tapping then
            {' F'(feed/spin):xpos_f}
      else
            {' F'feed:feed_f}
      endif
    if rot_axis_coord eq axis4_polar
        {[' A'apos]}
    endif   
endp
;-------------------
@drill_point   
    if not first_drill then
        if drill_type eq Thrd_Mill
            call @helicoil
        else
            {nb,'   ', [' X'xlpos],[' Y'ylpos],[' Z'zlpos]}
             if rot_axis_coord eq axis4_polar
                  apos= mod (apos,360)
                     {[' A'apos]}
             endif  
        endif
    endif
endp
;-------------------
@helicoil
     local integer num_step i2
     local numeric xpos1 ypos1 xpos_out ypos_out s_step1 sem_fin1  s_xpos s_ypos s_zpos s_feed 
     local numeric radius_ang_x radius_ang_y
     local logical flag_in
     local string comp_dir1
      start_ang=0
      left_thread=0
     s_xpos = xlpos
     s_ypos = ylpos
     s_zpos = zlpos
     s_feed = feed
    ;----- checking in or out -----------
      if inn eq 1
        flag_in = true
      ELSE
        flag_in = false
      endif
    ;----- first movement form in or out -------
      if flag_in eq true
           xlpos = s_xpos
           ylpos = s_ypos
           zlpos = drill_clearance_zl
           call @rapid_move
      else
           xlpos = (s_xpos+diameter/2+tool_diameter+2)
           ylpos = s_ypos
           zlpos = drill_clearance_zl
           call @rapid_move
      endif
    ;----- first movement from in or out -------
      {nb,'G0 Z'drill_upper_zl}
      change(xlpos) = false
      change(ylpos) = false
      zlpos = drill_clearance_zl
    ;---- avoid division by 0 --------
      if s_step == 0
              if sem_fin == 0
          sem_fin1 = 1
          s_step1 = 1
          else
          sem_fin1 = sem_fin
          s_step1 = sem_fin1 / 2
          endif
      else
          sem_fin1 = sem_fin
          s_step1 = s_step
      endif
    ;---- calculating the number of steps --------
      if frac(abs(sem_fin1 / s_step1)) > 0
          num_step = abs(sem_fin1 / s_step1 + 1)
      else
          num_step = abs(sem_fin1 / s_step1)
      endif
    ;---- calculating the number of steps --------
      if pitch > 0
          z_thread_start = drill_lower_zl
      else
              z_thread_start = drill_lower_zl + (INT(drill_depth/(PITCH))*PITCH)
      endif
      while num_step >= 1
          change(xlpos) = false
          change(ylpos) = false
          zlpos = z_thread_start
          call @line
    ; --- set the variables for in or out thread -----
          if flag_in eq true
          if left_thread <> 0
              if pitch > 0
               side = COMP_RIGHT
               comp = 'RR'
               arc_dir  =  0
               else
               side = COMP_LEFT
               comp = 'RL'
               arc_dir  = 1
               endif
          else
              if pitch > 0
               side = COMP_LEFT
               comp = 'RL'
               arc_dir  =  1
               else
               side = COMP_RIGHT
               comp = 'RR'
               arc_dir  = 0
               endif
          endif
          xpos_out = s_xpos
          radius = diameter/2 -( s_step * (num_step - 1) )
                  radius_ang_x = radius*(cos(start_ang))
                  radius_ang_y = radius*(sin(start_ang)) 
                  xpos1 = (radius_ang_x + s_xpos)
                  ypos1 = (radius_ang_y + s_ypos)
                  xlcenter_rel =(s_xpos-xpos1)
                  ylcenter_rel =(s_ypos-ypos1)
          else
          if left_thread <> 0
              if pitch > 0
               side = COMP_LEFT
               comp = 'RL'
               arc_dir  = 0
               else
               side = COMP_RIGHT
               comp = 'RR'
               arc_dir  =  1
               endif
          else
              if pitch > 0
               side = COMP_RIGHT
               comp = 'RR'
               arc_dir  =  1
               else
               side = COMP_LEFT
               comp = 'RL'
               arc_dir  = 0
               endif
          endif
          xpos_out = (s_xpos+diameter/2+tool_diameter+2)
          radius = diameter/2 +( s_step * (num_step - 1) )
                  radius_ang_x = radius*(cos(start_ang))
                  radius_ang_y = radius*(sin(start_ang)) 
                  xpos1 = (radius_ang_x + s_xpos)
                  ypos1 = (radius_ang_y + s_ypos) 
                  xlcenter_rel =(s_xpos-xpos1)
                  ylcenter_rel =(s_ypos-ypos1)
              endif
    ; --- set the variables for in or out thread -----
              call @compensation
          change(ylpos) = true
          change(zlpos) = false
          xlpos = xpos1
              ylpos = ypos1
              call @line
          start_angle = 0
          arc_size = -(abs(360 * d_step))
          depth =  1
          xlpos = xpos1
              ylpos = ypos1
              i2 = 1
              If pitch > 0
                  d_step=d_step
              else             ; DOWNWARDS
                   d_step= int(drill_depth/abs(pitch))
              endif
              
              while i2 <= ABS(d_step)
                  depth = i2 * pitch
                  call @helical_arc              
                  i2 = i2 + 1
              endw
;
          side = COMP_OFF
          call @compensation
;         {nb,'G40'}
          change(zlpos) = false
          xlpos = xpos_out
          ylpos = s_ypos
;         call @line
          {nb,'G1 X'xpos_out:xpos_f,' Y'ylpos}
          s_step1 = s_step1 + s_step1
          num_step = num_step-1
      endw
      change(ylpos) = false
      change(xlpos) = false
      zlpos = drill_clearance_zl
          {nb,'G0 Z'drill_clearance_zl}
          {nl}
endp
;-------------------
@mirror

     if mirror_type eq MIRROR_OFF then
           {nb, 'G50.1 X0 Y0'}
     else
           {nb, 'G51.1 '}
     if mirror_type eq MIRROR_X then
           {'X1 Y0'}
     endif
     if mirror_type eq MIRROR_Y then
           {'X0 Y1'}
     endif
     if mirror_type eq MIRROR_XY then
           {'X1 Y1'}
      endif
   endif
endp
;-------------------
@end_drill
    gcode = 80
    {nb, 'G'gcode}
    if drill_type eq tapping then
        gcode = 94
       {nb, 'G'gcode, ' '}
    endif
endp
;-------------------
@halt_program
    {' M0'}
endp
;--------------------
@round_comp
    ; NOP
endp
;--------------------
@start_of_job                                                                                                
  FIRTS_RAP_MOVE = 1 
    ; NOP
  Flag_end_of_job = false
endp
;--------------------
@end_of_job
    ; NOP
    Flag_end_of_job = true
    rotary_use_x = FALSE                                                                                                                       
endp
;--------------------
@assign_axis
    ;   TBD
endp
;     =======================
;     USER DEFINED PROCEDURES
;     =======================
@call_simple_proc
    active(message) = FALSE
    active(parm1)   = true
    active(parm2)   = FALSE
    active(parm3)   = FALSE
    proc_count      = 1
    call @call_proc
endp
;-------------------
@start_tool
    if tool_direction eq CW then
        mcode = 3
    else              ;  CCW
        mcode = 4
    endif
    {nb,' S'spin:integer_def_f, ' M'mcode}
    print_spin = spin
endp
;-------------------
@m_feed_spin
     if tool_direction eq CW
         mcode = 3
     else              ;  CW
         mcode = 4
     endif
   if change(spin)
    {nb,' S'spin:integer_def_f, ' M'mcode}
    change(spin) = FALSE
   endif     
    use_feed = 1
 endp
;-------------------
@stop_tool
    {nb ' M5'}
endp
@line_on
endp
@end_job_procs
endp
@line_4x
endp
@move_4x
endp
@line_5x
    {nb}
    gcode = 1
    if change(gcode) then
        {'G'gcode}
    else
        {'  '}
    endif
    {[' X'xmpos], [' Y'ympos], [' Z'zmpos], [' A'apos]}
    {[' F'feed]}
endp
@move_5x
IF FIRTS_RAP_MOVE EQ 1
    {nb, 'G58'}
    {nb}
    gcode = 0
    ;if clamp_flag eq TRUE
    ; {nb,'M36'};UNCLAMP
       clamp_flag = FALSE
    ;endif
    {nb,'G'gcode, [' X'xmpos], [' Y'ympos],[' A'apos]}
    {nb,'G0 G43 ', ' H'tool_number, ' D'tool_number ,[' Z'zmpos]}    
FIRTS_RAP_MOVE = 0
else
    {nb}
    gcode = 0
   if change(gcode) then
        {'G'gcode}
    else
        {'  '}
    endif
    {[' X'xmpos], [' Y'ympos], [' Z'zmpos], [' A'apos]}
endif
endp
@drill4x_pnt
endp
@rotary_info
  rotary_use_x = TRUE
endp
@chng_tool_cnext
endp
@init_cpos
endp
@move4x_dir
endp
@line4x_dir
endp
@move4x_polar
endp
@line4x_polar
endp
@arc4x_polar
endp
@move4x_cartesian
endp
@line4x_cartesian
endp
@arc4x_cartesian
endp
@drill4x_polar
endp
@drill4x_cartesian
endp
@call_prms
endp
@helical_arc
    if arc_dir eq 0
        gcode = 02
    else
        gcode = 03
    endif
    {nb,['G'gcode],[' X'xlpos],[' Y'ylpos]' I'xlcenter_rel,' J'ylcenter_rel,' Z'(z_thread_start+depth)}
endp
;-------------------
@plane_data
    if  !pos_decleared<<part_home_number>>
        call @home_data
        pos_decleared<<part_home_number>> = true
    endif
endp
@home_data 
        if x4_use eq true
            if used_in_auto eq 1 or used_in_other eq 1
               {nl,'O' (6090+part_home_number)}
               ;{nb,'G5.1 Q0'}
               {nb, 'G65 P6090 X'shift_x ' Y'shift_y ' Z'shift_z ' B'first_axis_angle:xpos_f,' A'mac_number:xpos_f ' C0 D0 E0 ( C=TIKUN_X D=TIKUN_Y E=TIKUN_Z HOME ' part_home_number ' B =  'angle_4x_around_x ' )' }
               call @end_proc  
           endif   
        endif
       
endp
@home_data1
                  {nl}
                   {nl, 'O6090'} 
                   ;{nb,'G08 P0'}
                   {nb, 'G28 G91 G0 Z0.'}
                 if Move_Only_Tool_Change
                   if move_home_y ne 0
                      {nb,'G90 G53 G0 Y',move_home_y}
                   endif 
                   if move_home_x ne 0
                      {nb,'G90 G53 G0 X',move_home_x}
                   endif 
                 endif                    
                   {nb,'IF [#1 GT 6] GOTO 777'}
                   ;----------G54 - G59 ------------------   
                   {nb,'#5321= [#[5201 +20*#1] + #24]'} ; g59 x
                   {nb,'#5322= [#[5202 +20*#1]+ #25]'} ; g59 y 
                   {nb,'#5323= [#[5203 +20*#1] + #26]'} ; g59 z
                   {nb,'#5324= #[5204 +20*#1] '} ; g59 B
                   {nb,'GOTO 888'}
                    {nl,'N777'}
                   {nb,'#1=#1-6.'}  
                   {nb,'#5321= [#[6981 +20*#1] + #24]'} ; g59 x
                   {nb,'#5322= [#[6982 +20*#1]+ #25]'} ; g59 y 
                   {nb,'#5323= [#[6983 +20*#1] + #26]'} ; g59 z
                   {nb,'#5324= #[6984 +20*#1] '} ; g59 B
                   {nl,'N888'}
                   {nb,'#140= [#5321 - #5301]'} ; g59 x - g58 x
                   {nb,'#141= [#5322 - #5302]'} ; g59 y - g58 y
                   {nb,'#142= [#5323 - #5303]'} ; g59 z - g58 z

                    {nb,'#143 = [[#141*COS[#2]] - [#142*SIN[#2]]]'} 
                    {nb,'#144 = [[#141*SIN[#2]] + [#142*COS[#2]]]'}
                    {nb,'#5321 = #5301 + #140 + #3'};g59xnew
                    {nb,'#5322 = #5302 + #143 + #7'};g59ynew
                    {nb,'#5323 = #5303 + #144 + #8'};g59znew
                    {nb, 'G90 G59'} 
                   {nb,'G0 A0.'}
                   {nb,'G0 A#2'}
                    {NB,'G90'}
                    {nb,'M99'}
     {nl}
endp
@tool_path_info
endp
@tmatrix
endp
@machine_stop
     if machine_stop
            {nb,'M9'}
            {nb,'G91 G28 Z0 M5'}
            {nb,'G91 G28 Y0'}
            {nb,'G90'}
            {nb,'M0'}   
             use_m0 = 1
     endif
endp
@mco_message
     {nb,message}
endp


